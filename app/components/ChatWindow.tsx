"use client"
import React, { useState, useEffect, useRef } from 'react';

const ChatWindow = () => {
    const [chatHistory, setChatHistory] = useState<{ message: string, isUser: boolean }[]>([]);
    const [message, setMessage] = useState("");
    const [isOpen, setIsOpen] = useState(false);
    const [isTyping, setIsTyping] = useState(false);
    const chatEndRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const timer = setTimeout(() => {
            if (!isOpen) {
                setIsOpen(true);
                setChatHistory(prevHistory => [...prevHistory, { message: "üõçÔ∏è Merhaba! üëã Ho≈ü geldiniz! Size yardƒ±mcƒ± olmamƒ± ister misiniz? L√ºtfen bir soru sorun veya a≈üaƒüƒ±dan en sƒ±k sorulan sorularƒ±mƒ±zƒ± se√ßin. üòä", isUser: false }]);
            }
        }, 10000);
        return () => clearTimeout(timer);
    }, [isOpen]);

    const questionsAndAnswers = [
        { question: "√áatdƒ±rƒ±lma m√ºdd…ôti n…ô q…ôd…ôrdir?", answer: "Sifari≈ül…ôriniz ad…ôt…ôn 1-3 i≈ü g√ºn√º …ôrzind…ô kargoya verilir. X√ºsusi g√ºnl…ôrd…ô sƒ±xlƒ±q s…ôb…ôbind…ôn m√ºdd…ôt uzana bil…ôr. üìû Daha …ôtraflƒ± m…ôlumat √º√ß√ºn WhatsApp il…ô …ôlaq…ô saxlayƒ±n! (üì© WhatsApp il…ô D…ôst…ôk Al d√ºym…ôsi)" },
        { question: "M…ôhsullarƒ±nƒ±zƒ±n √∂l√ß√ºl…ôri nec…ôdir?", answer: "M…ôhsullarƒ±mƒ±zƒ±n √∂l√ß√ºl…ôri m…ôhsul s…ôhif…ôl…ôrind…ô …ôtraflƒ± ≈ü…ôkild…ô g√∂st…ôrilmi≈üdir. Z…ôhm…ôt olmasa √∂l√ß√º c…ôdv…ôlini yoxlayƒ±n." },
        { question: "Geri qaytarma v…ô d…ôyi≈üdirm…ô ≈ü…ôrtl…ôri n…ôl…ôrdir?", answer: "Geri qaytarma v…ô d…ôyi≈üdirm…ô …ôm…ôliyyatlarƒ± √º√ß√ºn 30 g√ºn m√ºdd…ôtiniz var. ∆ètraflƒ± m…ôlumat √º√ß√ºn m√º≈üt…ôri xidm…ôtl…ôrimiz…ô m√ºraci…ôt edin." },
        { question: "√ñd…ôni≈ü √ºsullarƒ± n…ôl…ôrdir?", answer: "Kredit kartƒ±, bank k√∂√ß√ºrm…ôsi v…ô qapƒ±da √∂d…ôni≈ü se√ßiml…ôrimiz m√∂vcuddur." },
        { question: "Stokda olmayan m…ôhsullarƒ± yenid…ôn g…ôtir…ôc…ôksinizmi?", answer: "Stokda olmayan m…ôhsullar √º√ß√ºn t…ôl…ôb yarada bil…ôrsiniz. M…ôhsul stoka daxil olduqda siz…ô bildiri≈ü g√∂nd…ôril…ôc…ôkdir." }
    ];

    const handleSendMessage = () => {
        if (message.trim() !== "") {
            setChatHistory(prevHistory => [...prevHistory, { message, isUser: true }]);
            setMessage("");
            setIsTyping(true);
            setTimeout(() => {
                setChatHistory(prevHistory => [...prevHistory, { message: "ü§î Bu sorulardan birine mi yanƒ±t arƒ±yorsunuz? üìå L√ºtfen a≈üaƒüƒ±dan bir se√ßenek se√ßin:", isUser: false }, ...questionsAndAnswers.map(qa => ({ message: qa.question, isUser: false }))]);
                setIsTyping(false);
            }, 1000);
        }
    };

    const handleQuestionClick = (question: string, answer: string) => {
        setChatHistory(prevHistory => [...prevHistory, { message: question, isUser: true }]);
        setIsTyping(true);
        setTimeout(() => {
            setChatHistory(prevHistory => [...prevHistory, { message: answer, isUser: false }]);
            setIsTyping(false);
        }, 1000);
    };

    const renderChatBubbles = () => {
        return chatHistory.map((chat, index) => (
            <div key={index} className={`p-2 max-w-xs mb-2 rounded-full ${chat.isUser ? 'bg-blue-500 text-white ml-auto' : 'bg-gray-200 dark:bg-gray-700 mr-auto'}`}>
                {chat.message}
                {!chat.isUser && questionsAndAnswers.some(qa => qa.question === chat.message) && (
                    <button onClick={() => handleQuestionClick(chat.message, questionsAndAnswers.find(qa => qa.question === chat.message)?.answer || '')} className="text-blue-500 hover:underline">
                        {chat.message}
                    </button>
                )}
            </div>
        ));
    };

    useEffect(() => {
        if (chatEndRef.current) {
            chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [chatHistory]);

    const toggleChatWindow = () => {
        setIsOpen(!isOpen);
    };

    return (
        <>
            {isOpen ? (
                <div style={{ zIndex: 9999 }} className="chat-window fixed bottom-4 right-4 bg-white dark:bg-gray-900 shadow-xl rounded-lg p-6 w-96 h-[36rem]">
                    <div className="flex justify-between items-center border-b pb-2 mb-4">
                        <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">Chat P…ônc…ôr…ôsi</h2>
                        <button onClick={toggleChatWindow} className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">‚úñ</button>
                    </div>
                    <div className="chat-bubbles mt-4 space-y-3 max-h-[24rem] overflow-y-auto">
                        {renderChatBubbles()}
                        {isTyping && (
                            <div className="typing-indicator text-gray-500 text-sm">Yanƒ±t veriliyor...</div>
                        )}
                        <div ref={chatEndRef} />
                    </div>
                    <div className="flex space-x-2 mt-4">
                        <input
                            type="text"
                            value={message}
                            onChange={(e) => setMessage(e.target.value)}
                            placeholder="Mesajƒ±nƒ±zƒ± yazƒ±n..."
                            className="flex-grow p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white"
                        />
                        <button onClick={handleSendMessage} className="bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition duration-300">
                            G√∂nder
                        </button>
                    </div>
                    <button onClick={() => window.open('https://wa.me/1234567890', '_blank')} className="bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 mt-3 transition duration-300">
                        WhatsApp ile Destek Al
                    </button>
                </div>
            ) : (
                <div className="fixed bottom-4 right-4 bg-blue-500 text-white rounded-full p-4 cursor-pointer" onClick={toggleChatWindow}>
                    Chat A√ß
                </div>
            )}
        </>
    );
};

export default ChatWindow;